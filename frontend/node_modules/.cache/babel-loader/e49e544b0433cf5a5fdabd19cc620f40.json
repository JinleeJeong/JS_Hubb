{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\src\\\\components\\\\MyMessage\\\\MyMessagePage.js\";\nimport React, { Component, Fragment } from 'react';\nimport './MyMessagePage.css';\nimport socketIOClient from \"socket.io-client\";\nimport Inbox from './Inbox';\nimport axios from 'axios';\nimport { AppContext } from '../../contexts/appContext';\nimport apiClient from '../../helpers/apiClient';\n\nvar MyMessagePage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MyMessagePage, _Component);\n\n  function MyMessagePage(props) {\n    var _this;\n\n    _classCallCheck(this, MyMessagePage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MyMessagePage).call(this, props));\n\n    _this.renderingList = function () {\n      var messages = _this.state.messages.map(function (message) {\n        return React.createElement(Inbox, {\n          key: message._id,\n          title: message.title,\n          body: message.body,\n          seen: message.seen,\n          sender: message.sender,\n          recipient: message.recipient,\n          sendedAt: message.sendedAt,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        });\n      });\n\n      return React.createElement(\"ul\", {\n        className: \"list-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \" \", messages, \" \");\n    };\n\n    _this.state = {\n      // 메세지 list와 pager를 위한 정보 \n      messages: [],\n      messagePagerInfo: {\n        total: null,\n        showNum: 10,\n        page: 1\n      }\n    };\n    _this.getMessagesApi = _this.getMessagesApi.bind(_assertThisInitialized(_this));\n    _this.getArrivalMessage = _this.getArrivalMessage.bind(_assertThisInitialized(_this));\n    _this.messagePagerHandler = _this.messagePagerHandler.bind(_assertThisInitialized(_this));\n    return _this;\n  } // message를 server로 부터 가져오기 위한 function\n\n\n  _createClass(MyMessagePage, [{\n    key: \"getMessagesApi\",\n    value: function getMessagesApi(data) {\n      var _this2 = this;\n\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      apiClient.post('/messages', data).then(function (res) {\n        var total = type == \"newMessage\" ? res.total + 1 : res.total;\n\n        _this2.setState(_objectSpread({}, _this2.state, {\n          messages: res.list,\n          messagePagerInfo: _objectSpread({}, _this2.state.messagePagerInfo, {\n            total: total,\n            page: res.page\n          })\n        }));\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    } // change stream 이벤트 핸들러(메세지가 왔을 때)\n\n  }, {\n    key: \"getArrivalMessage\",\n    value: function getArrivalMessage(data) {\n      if (!this.context.state.signInInfo.status || this.context.state.signInInfo.id != data.recipient) return true;\n      this.getMessagesApi(this.state.messagePagerInfo, 'newMessage');\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.context.actions.checkAuth().then(function () {\n                  if (!_this3.context.state.signInInfo.status) return; // 핸들러 등록 \n\n                  _this3.context.state.socketConnection.io.on('test', function (data) {\n                    return _this3.getArrivalMessage(data);\n                  });\n\n                  _this3.getMessagesApi(_this3.state.messagePagerInfo);\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"unmount\"); // 핸들러 해제 \n\n      if (this.context.state.socketConnection.io) this.context.state.socketConnection.io.off('test');\n    } // 페이지 이동에 따른 message를 가져온다. \n\n  }, {\n    key: \"messagePagerHandler\",\n    value: function messagePagerHandler(id) {\n      var page = this.state.messagePagerInfo.page;\n      if (id == \"right\") page = page + 1;else page = page - 1;\n      this.getMessagesApi(_objectSpread({}, this.state.messagePagerInfo, {\n        page: page\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state$messagePa = this.state.messagePagerInfo,\n          total = _this$state$messagePa.total,\n          showNum = _this$state$messagePa.showNum,\n          page = _this$state$messagePa.page;\n      return React.createElement(\"div\", {\n        className: \"page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"aboveList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"btn-group\",\n        style: {\n          width: '100px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        disabled: page == 1,\n        onClick: function onClick() {\n          return _this4.messagePagerHandler(\"left\");\n        },\n        type: \"button\",\n        class: \"btn btn-default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        class: \"glyphicon glyphicon-chevron-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        disabled: total == 0 || page == Math.ceil(total / showNum),\n        onClick: function onClick() {\n          return _this4.messagePagerHandler(\"right\");\n        },\n        type: \"button\",\n        class: \"btn btn-default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        class: \"glyphicon glyphicon-chevron-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.renderingList()));\n    }\n  }]);\n\n  return MyMessagePage;\n}(Component);\n\nMyMessagePage.contextType = AppContext;\nexport default MyMessagePage;","map":{"version":3,"sources":["C:\\Users\\82102\\Study_Hub\\Study_Project\\frontend\\src\\components\\MyMessage\\MyMessagePage.js"],"names":["React","Component","Fragment","socketIOClient","Inbox","axios","AppContext","apiClient","MyMessagePage","props","renderingList","messages","state","map","message","_id","title","body","seen","sender","recipient","sendedAt","messagePagerInfo","total","showNum","page","getMessagesApi","bind","getArrivalMessage","messagePagerHandler","data","type","post","then","res","setState","list","catch","err","console","log","context","signInInfo","status","id","actions","checkAuth","socketConnection","io","on","off","width","Math","ceil","contextType"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport './MyMessagePage.css';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Inbox from './Inbox';\r\nimport axios from 'axios';\r\nimport { AppContext } from '../../contexts/appContext';\r\nimport apiClient from '../../helpers/apiClient';\r\n\r\nclass MyMessagePage extends Component {\r\n    static contextType = AppContext;\r\n\r\n    constructor (props){\r\n      super(props);\r\n\r\n      this.state = {\r\n        // 메세지 list와 pager를 위한 정보 \r\n        messages: [],\r\n        messagePagerInfo: {\r\n          total : null,\r\n          showNum : 10,\r\n          page: 1\r\n        }\r\n      }\r\n\r\n      this.getMessagesApi = this.getMessagesApi.bind(this);\r\n      this.getArrivalMessage = this.getArrivalMessage.bind(this);\r\n      this.messagePagerHandler = this.messagePagerHandler.bind(this);\r\n    }\r\n\r\n    // message를 server로 부터 가져오기 위한 function\r\n    getMessagesApi(data, type = null){\r\n      apiClient.post('/messages',data)\r\n        .then(res => {\r\n          const total = type == \"newMessage\" ? res.total + 1 : res.total;\r\n          this.setState({\r\n            ...this.state,\r\n            messages: res.list,\r\n            messagePagerInfo: {\r\n              ...this.state.messagePagerInfo,\r\n              total: total,\r\n              page: res.page\r\n            } \r\n          });\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n    // change stream 이벤트 핸들러(메세지가 왔을 때)\r\n    getArrivalMessage(data){\r\n      if(!this.context.state.signInInfo.status || this.context.state.signInInfo.id != data.recipient)\r\n        return true\r\n\r\n      this.getMessagesApi(this.state.messagePagerInfo, 'newMessage');\r\n    }\r\n\r\n    renderingList = ()=>{\r\n      const messages = this.state.messages.map(message=>{\r\n        return <Inbox key = {message._id}\r\n          title = {message.title}\r\n          body = {message.body}\r\n          seen = {message.seen}\r\n          sender = {message.sender}\r\n          recipient = {message.recipient}\r\n          sendedAt = {message.sendedAt}\r\n        ></Inbox>\r\n      });\r\n\r\n      return <ul className = \"list-group\"> {messages} </ul>;\r\n    }\r\n\r\n    async componentDidMount(){\r\n      this.context.actions.checkAuth()\r\n        .then (()=> {\r\n\r\n          if (!this.context.state.signInInfo.status)\r\n            return;\r\n          // 핸들러 등록 \r\n          this.context.state.socketConnection.io.on('test',(data) => this.getArrivalMessage(data));\r\n          this.getMessagesApi(this.state.messagePagerInfo);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount(){\r\n      console.log(\"unmount\");\r\n      // 핸들러 해제 \r\n      if (this.context.state.socketConnection.io)\r\n        this.context.state.socketConnection.io.off('test');\r\n    }\r\n    // 페이지 이동에 따른 message를 가져온다. \r\n    messagePagerHandler (id) {\r\n      let {page} = this.state.messagePagerInfo;\r\n\r\n      if (id == \"right\")\r\n          page = page + 1;\r\n      else\r\n          page = page - 1;\r\n\r\n      this.getMessagesApi({...this.state.messagePagerInfo, page: page});      \r\n    }\r\n\r\n    render (){\r\n      const{total,showNum ,page} = this.state.messagePagerInfo;\r\n        return (\r\n          <div className = \"page\">\r\n            <div className = \"aboveList\">\r\n              <div class = \"btn-group\" style = {{width: '100px'}}>\r\n              <button disabled = {page == 1} onClick = {()=>this.messagePagerHandler(\"left\")} type =\"button\" class =\"btn btn-default\">\r\n                <span class=\"glyphicon glyphicon-chevron-left\"></span>\r\n              </button>\r\n              <button disabled = {total == 0 || page == Math.ceil(total/showNum)} onClick = {()=>this.messagePagerHandler(\"right\")} type =\"button\" class =\"btn btn-default\">\r\n                <span class=\"glyphicon glyphicon-chevron-right\"></span>\r\n              </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              {this.renderingList()}\r\n            </div>\r\n\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyMessagePage;"]},"metadata":{},"sourceType":"module"}