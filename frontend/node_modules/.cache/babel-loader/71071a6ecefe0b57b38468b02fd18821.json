{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport validator from 'validator';\n\nvar InputValidator =\n/*#__PURE__*/\nfunction () {\n  function InputValidator() {\n    _classCallCheck(this, InputValidator);\n  }\n\n  _createClass(InputValidator, null, [{\n    key: \"strLengthCondition\",\n    value: function strLengthCondition(inpStr, args) {\n      if (inpStr.length < args[0]['min'] || inpStr.length > args[0]['max']) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"isNotEmpty\",\n    value: function isNotEmpty(inpStr) {\n      return !validator.isEmpty(inpStr);\n    } // 8글자 이상 20글자 이하 and 특수문자 최소 1개 포함 여부를 검사한다. \n\n  }, {\n    key: \"passwordStrengthCondition\",\n    value: function passwordStrengthCondition(inpStr) {\n      return new RegExp('^(?=.*?[#?!@$%^&*-]).{8,20}$').test(inpStr);\n    } // 1차 비밀번호와 2차 비밀번호가 같은지 여부를 검사한다.\n\n  }, {\n    key: \"sameAsPassword\",\n    value: function sameAsPassword(passwordStr, args) {\n      return passwordStr == args[0]['confirmationStr'];\n    } // 조건에 맞는 글자만 허용하는지 여부를 검사한다.\n\n  }, {\n    key: \"letterCondition\",\n    value: function letterCondition(inpStr, conditions) {\n      var matchingCharacters = {\n        'hangul': '가-힣',\n        'alphabet': 'A-Za-z',\n        'number': '0-9'\n      };\n      var regex = '^[';\n      conditions.forEach(function (type) {\n        regex += matchingCharacters[type];\n      });\n      regex += ']+$';\n      return new RegExp(regex).test(inpStr);\n    }\n  }]);\n\n  return InputValidator;\n}();\n\nInputValidator.validate = validator;\nexport default InputValidator;","map":{"version":3,"sources":["C:\\Users\\82102\\Study_Hub\\Study_Project\\frontend\\src\\helpers\\InputValidator.js"],"names":["validator","InputValidator","inpStr","args","length","isEmpty","RegExp","test","passwordStr","conditions","matchingCharacters","regex","forEach","type","validate"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,WAAtB;;IAEMC,c;;;;;;;;;uCAIuBC,M,EAAOC,I,EAAK;AACrC,UAAID,MAAM,CAACE,MAAP,GAAgBD,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,CAAhB,IAAkCD,MAAM,CAACE,MAAP,GAAgBD,IAAI,CAAC,CAAD,CAAJ,CAAQ,KAAR,CAAtD,EAAqE;AACjE,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACD;;;+BAEkBD,M,EAAO;AACxB,aAAO,CAACF,SAAS,CAACK,OAAV,CAAkBH,MAAlB,CAAR;AACD,K,CAED;;;;8CACkCA,M,EAAO;AACvC,aAAO,IAAII,MAAJ,CAAW,8BAAX,EAA2CC,IAA3C,CAAgDL,MAAhD,CAAP;AACD,K,CAED;;;;mCACuBM,W,EAAYL,I,EAAK;AACtC,aAAOK,WAAW,IAAIL,IAAI,CAAC,CAAD,CAAJ,CAAQ,iBAAR,CAAtB;AACD,K,CAED;;;;oCACuBD,M,EAAOO,U,EAAW;AAEvC,UAAMC,kBAAkB,GAAG;AACzB,kBAAU,KADe;AAEzB,oBAAY,QAFa;AAGzB,kBAAU;AAHe,OAA3B;AAMA,UAAIC,KAAK,GAAG,IAAZ;AAEAF,MAAAA,UAAU,CAACG,OAAX,CAAmB,UAAAC,IAAI,EAAI;AACzBF,QAAAA,KAAK,IAAID,kBAAkB,CAACG,IAAD,CAA3B;AACD,OAFD;AAGAF,MAAAA,KAAK,IAAI,KAAT;AAEA,aAAO,IAAIL,MAAJ,CAAWK,KAAX,EAAkBJ,IAAlB,CAAuBL,MAAvB,CAAP;AACD;;;;;;AA1CGD,c,CAEGa,Q,GAAWd,S;AAyClB,eAAeC,cAAf","sourcesContent":["import validator from 'validator';\r\n\r\nclass InputValidator {\r\n\r\n  static validate = validator;\r\n  \r\n  static strLengthCondition (inpStr,args){\r\n    if (inpStr.length < args[0]['min'] || inpStr.length > args[0]['max']){\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  static isNotEmpty (inpStr){\r\n    return !validator.isEmpty(inpStr);\r\n  }\r\n  \r\n  // 8글자 이상 20글자 이하 and 특수문자 최소 1개 포함 여부를 검사한다. \r\n  static passwordStrengthCondition (inpStr){\r\n    return new RegExp('^(?=.*?[#?!@$%^&*-]).{8,20}$').test(inpStr);\r\n  }\r\n  \r\n  // 1차 비밀번호와 2차 비밀번호가 같은지 여부를 검사한다.\r\n  static sameAsPassword (passwordStr,args){\r\n    return passwordStr == args[0]['confirmationStr'];\r\n  }\r\n  \r\n  // 조건에 맞는 글자만 허용하는지 여부를 검사한다.\r\n  static letterCondition(inpStr,conditions){\r\n    \r\n    const matchingCharacters = {\r\n      'hangul': '가-힣',\r\n      'alphabet': 'A-Za-z',\r\n      'number': '0-9'\r\n    }\r\n  \r\n    let regex = '^[';\r\n  \r\n    conditions.forEach(type => {\r\n      regex += matchingCharacters[type];\r\n    });\r\n    regex += ']+$';\r\n  \r\n    return new RegExp(regex).test(inpStr);\r\n  }\r\n} export default InputValidator;\r\n"]},"metadata":{},"sourceType":"module"}