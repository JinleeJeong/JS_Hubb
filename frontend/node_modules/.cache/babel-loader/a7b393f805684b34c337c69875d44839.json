{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\src\\\\components\\\\Signup\\\\SignUpForm.js\";\nimport React, { Component } from 'react';\nimport { Form, FormGroup, ControlLabel, FormControl, HelpBlock, Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\nimport PropTypes from 'prop-types';\nimport apiClient from '../../helpers/apiClient';\nimport InputValidator from '../../helpers/InputValidator';\nimport FormChecker from '../../helpers/FormChecker';\n\nvar SignUpForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SignUpForm, _Component);\n\n  function SignUpForm(props) {\n    var _this;\n\n    _classCallCheck(this, SignUpForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SignUpForm).call(this, props)); // formFieldInput : 해당 객체의 property에 사용자가 각 칸에 입력한 값들을 저장한다.\n    // formFieldValid : 각 칸에 입력된 값 (formFiledInput 객체의 properties)의 상태를 저장한다(null, error, warning etc)  \n    // formFieldMessage : 유효성 검사를 통과하지 못한 칸 아래에 나타낼 오류 메시지를 저장한다. \n\n    _this.state = {\n      formFieldInput: {\n        userName: '',\n        email: '',\n        password: '',\n        passwordConfirmation: ''\n      },\n      formFieldValid: {\n        userNameValid: null,\n        emailValid: null,\n        passwordValid: null,\n        passwordConfirmationValid: null\n      },\n      formFieldMessage: {\n        userNameValError: '',\n        emailValError: '',\n        passwordValError: '',\n        passwordConfirmationValError: ''\n      }\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SignUpForm, [{\n    key: \"registrationApiCall\",\n    value: function registrationApiCall() {\n      var _this2 = this;\n\n      apiClient.post('/users/register', {\n        email: this.state.formFieldInput.email,\n        password: this.state.formFieldInput.password,\n        name: this.state.formFieldInput.userName\n      }).then(function (res) {\n        if (res.message == \"회원가입에 성공했습니다.\") {\n          console.log(\"성공\");\n\n          _this2.props.history.push('/signin');\n        } else if (res.message == \"중복된 아이디입니다.\") _this2.setValidationResult({\n          fieldName: 'email',\n          isCorrect: 'error',\n          message: \"이미 존재하는 아이디입니다.\"\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }, {\n    key: \"setValidationResult\",\n    value: function setValidationResult(validationResult) {\n      var _this$state = this.state,\n          formFieldValid = _this$state.formFieldValid,\n          formFieldMessage = _this$state.formFieldMessage;\n      formFieldValid[validationResult['fieldName'] + 'Valid'] = validationResult['isCorrect'];\n      formFieldMessage[validationResult['fieldName'] + 'ValError'] = validationResult['message'];\n      this.setState(function (prevState) {\n        return _objectSpread({}, prevState, {\n          formFieldValid: formFieldValid,\n          formFieldMessage: formFieldMessage\n        });\n      });\n    } // 회원가입 버튼을 누를 때 실행되는 함수로서 사용자 입력 값의 유효성을 검사한 후 state를 업데이트한다. \n\n  }, {\n    key: \"validateChangedField\",\n    value: function validateChangedField(fieldName, value) {\n      var formChecker, validationResult;\n\n      switch (fieldName) {\n        case 'userName':\n          // FormChecker 객체의 3번째 parameter는 만족해야 하는 유효성 정보 객체의 list이다. \n          // list에서 n번째 객체의 조건이 만족되어야 n+1번째 조건을 검사하게 된다.\n          // 따라서 우선하여야 할 조건 순서를 고려하여 list를 구성해야 한다는 점에 유의해야 한다.\n          formChecker = new FormChecker(fieldName, value, [{\n            method: InputValidator.isNotEmpty,\n            args: [],\n            message: '공란일 수 없습니다'\n          }, {\n            method: InputValidator.letterCondition,\n            args: ['hangul', 'alphabet', 'number'],\n            message: '한글, 알파벳, 숫자만 입력 가능합니다.'\n          }, {\n            method: InputValidator.strLengthCondition,\n            args: [{\n              min: 2,\n              max: 10\n            }],\n            message: 2 + ' 글자 이상 ' + 10 + ' 글자 이하여야 합니다'\n          }]);\n          break;\n\n        case 'email':\n          formChecker = new FormChecker(fieldName, value, [{\n            method: InputValidator.isNotEmpty,\n            args: [],\n            message: '공란일 수 없습니다'\n          }, {\n            method: InputValidator.validate.isEmail,\n            args: [],\n            message: '올바른 이메일 형식이 아닙니다'\n          }]);\n          break;\n\n        case 'password':\n          formChecker = new FormChecker(fieldName, value, [{\n            method: InputValidator.isNotEmpty,\n            args: [],\n            message: '공란일 수 없습니다'\n          }, {\n            method: InputValidator.passwordStrengthCondition,\n            args: [],\n            message: '특수문자 포함 최소 8자 ~ 최대 20자 이내로 입력합니다.'\n          }]);\n          break;\n\n        case 'passwordConfirmation':\n          formChecker = new FormChecker(fieldName, value, [{\n            method: InputValidator.isNotEmpty,\n            args: [],\n            message: '공란일 수 없습니다'\n          }, {\n            method: InputValidator.sameAsPassword,\n            args: [{\n              confirmationStr: this.state.formFieldInput.password\n            }],\n            message: '비밀번호가 일치하지 않습니다'\n          }]);\n          break;\n\n        default:\n          break;\n      }\n\n      validationResult = formChecker.validate();\n      this.setValidationResult(validationResult);\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      var _this3 = this;\n\n      var name = e.target.name;\n      var value = e.target.value;\n      this.setState(function (prevState) {\n        return {\n          formFieldInput: _objectSpread({}, prevState.formFieldInput, _defineProperty({}, name, value))\n        };\n      }, function () {\n        return _this3.validateChangedField(name, value);\n      });\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      //you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. \n      e.preventDefault();\n      var _this$state$formField = this.state.formFieldValid,\n          emailValid = _this$state$formField.emailValid,\n          userNameValid = _this$state$formField.userNameValid,\n          passwordValid = _this$state$formField.passwordValid,\n          passwordConfirmationValid = _this$state$formField.passwordConfirmationValid;\n\n      if (emailValid === null && userNameValid === null && passwordValid === null && passwordConfirmationValid === null) {\n        this.registrationApiCall();\n      } else console.log('Submit conditions are not satisfied..');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"FormHeader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"\\uD68C\\uC6D0\\uAC00\\uC785\"), React.createElement(FormGroup, {\n        validationState: this.state.formFieldValid.userNameValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"\\uC774\\uB984\"), React.createElement(FormControl, {\n        value: this.state.formFieldInput.userName,\n        onChange: this.onChange,\n        type: \"text\",\n        name: \"userName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, this.state.formFieldMessage.userNameValError)), React.createElement(FormGroup, {\n        validationState: this.state.formFieldValid.emailValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"\\uC774\\uBA54\\uC77C \\uC8FC\\uC18C\"), React.createElement(FormControl, {\n        value: this.state.formFieldInput.email,\n        onChange: this.onChange,\n        type: \"text\",\n        name: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, this.state.formFieldMessage.emailValError)), React.createElement(FormGroup, {\n        validationState: this.state.formFieldValid.passwordValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"\\uBE44\\uBC00\\uBC88\\uD638\"), React.createElement(FormControl, {\n        value: this.state.formFieldInput.password,\n        onChange: this.onChange,\n        type: \"password\",\n        name: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, this.state.formFieldMessage.passwordValError)), React.createElement(FormGroup, {\n        style: {\n          marginBottom: '50px'\n        },\n        validationState: this.state.formFieldValid.passwordConfirmationValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(ControlLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\"), React.createElement(FormControl, {\n        value: this.state.formFieldInput.passwordConfirmation,\n        onChange: this.onChange,\n        type: \"password\",\n        name: \"passwordConfirmation\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }), React.createElement(FormControl.Feedback, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }), React.createElement(HelpBlock, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, this.state.formFieldMessage.passwordConfirmationValError)), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(Button, {\n        bsStyle: \"primary\",\n        block: true,\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"\\uD655\\uC778\"))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"removeLinkDec\",\n        href: \"http://localhost:8080/api/users/google_auth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Button, {\n        style: {\n          marginBottom: '15px'\n        },\n        bsStyle: \"danger\",\n        block: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, \"\\uAD6C\\uAE00 \\uACC4\\uC815\\uC73C\\uB85C \\uC2DC\\uC791\\uD558\\uAE30\")), React.createElement(\"a\", {\n        className: \"removeLinkDec\",\n        href: \"http://localhost:8080/api/users/naver_auth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Button, {\n        style: {\n          marginBottom: '15px'\n        },\n        bsStyle: \"success\",\n        block: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"\\uB124\\uC774\\uBC84 \\uACC4\\uC815\\uC73C\\uB85C \\uC2DC\\uC791\\uD558\\uAE30\"))));\n    }\n  }]);\n\n  return SignUpForm;\n}(Component);\n\nSignUpForm.propTypes = {\n  history: PropTypes.object.isRequired\n};\nexport default withRouter(SignUpForm);","map":{"version":3,"sources":["C:\\Users\\82102\\Study_Hub\\Study_Project\\frontend\\src\\components\\Signup\\SignUpForm.js"],"names":["React","Component","Form","FormGroup","ControlLabel","FormControl","HelpBlock","Button","withRouter","PropTypes","apiClient","InputValidator","FormChecker","SignUpForm","props","state","formFieldInput","userName","email","password","passwordConfirmation","formFieldValid","userNameValid","emailValid","passwordValid","passwordConfirmationValid","formFieldMessage","userNameValError","emailValError","passwordValError","passwordConfirmationValError","onChange","bind","onSubmit","post","name","then","res","message","console","log","history","push","setValidationResult","fieldName","isCorrect","catch","err","validationResult","setState","prevState","value","formChecker","method","isNotEmpty","args","letterCondition","strLengthCondition","min","max","validate","isEmail","passwordStrengthCondition","sameAsPassword","confirmationStr","e","target","validateChangedField","preventDefault","registrationApiCall","marginBottom","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { Form, FormGroup, ControlLabel, FormControl, HelpBlock, Button } from 'react-bootstrap';\r\nimport {withRouter} from 'react-router'\r\nimport PropTypes from 'prop-types';\r\nimport apiClient from '../../helpers/apiClient';\r\nimport InputValidator from '../../helpers/InputValidator';\r\nimport FormChecker from '../../helpers/FormChecker';\r\n\r\nclass SignUpForm extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    // formFieldInput : 해당 객체의 property에 사용자가 각 칸에 입력한 값들을 저장한다.\r\n    // formFieldValid : 각 칸에 입력된 값 (formFiledInput 객체의 properties)의 상태를 저장한다(null, error, warning etc)  \r\n    // formFieldMessage : 유효성 검사를 통과하지 못한 칸 아래에 나타낼 오류 메시지를 저장한다. \r\n    this.state = {\r\n      formFieldInput : \r\n      {\r\n        userName : '' ,\r\n        email: '',\r\n        password:'',\r\n        passwordConfirmation : ''\r\n      },\r\n      formFieldValid :\r\n      {\r\n        userNameValid : null,\r\n        emailValid : null,\r\n        passwordValid : null,\r\n        passwordConfirmationValid : null,\r\n      },\r\n      formFieldMessage :\r\n      {\r\n        userNameValError : '',\r\n        emailValError : '',\r\n        passwordValError : '',\r\n        passwordConfirmationValError : ''\r\n      }\r\n  }\r\n\r\n  this.onChange = this.onChange.bind(this);\r\n  this.onSubmit = this.onSubmit.bind(this);\r\n}\r\n\r\nregistrationApiCall (){\r\n  apiClient.post('/users/register',{\r\n    email: this.state.formFieldInput.email,\r\n    password: this.state.formFieldInput.password,\r\n    name: this.state.formFieldInput.userName,\r\n  })\r\n  .then(res => {\r\n    if (res.message == \"회원가입에 성공했습니다.\"){\r\n      console.log(\"성공\");\r\n      this.props.history.push('/signin');\r\n    }\r\n    else if(res.message == \"중복된 아이디입니다.\")\r\n      this.setValidationResult({\r\n        fieldName: 'email',\r\n        isCorrect: 'error',\r\n        message: \"이미 존재하는 아이디입니다.\"\r\n      });\r\n  })\r\n  .catch(err=> console.log(err));\r\n}\r\n\r\nsetValidationResult (validationResult){\r\n  \r\n  let {formFieldValid, formFieldMessage} = this.state;\r\n\r\n  formFieldValid[validationResult['fieldName'] + 'Valid'] = validationResult['isCorrect'];\r\n  formFieldMessage[validationResult['fieldName'] + 'ValError'] = validationResult['message'];\r\n  \r\n  this.setState (\r\n    prevState => ({\r\n      ...prevState,\r\n      formFieldValid :  formFieldValid,\r\n      formFieldMessage : formFieldMessage\r\n    }));\r\n}\r\n\r\n// 회원가입 버튼을 누를 때 실행되는 함수로서 사용자 입력 값의 유효성을 검사한 후 state를 업데이트한다. \r\nvalidateChangedField(fieldName,value){\r\n  \r\n  let formChecker,validationResult;\r\n\r\n  switch (fieldName){\r\n    case 'userName' :\r\n      // FormChecker 객체의 3번째 parameter는 만족해야 하는 유효성 정보 객체의 list이다. \r\n      // list에서 n번째 객체의 조건이 만족되어야 n+1번째 조건을 검사하게 된다.\r\n      // 따라서 우선하여야 할 조건 순서를 고려하여 list를 구성해야 한다는 점에 유의해야 한다.\r\n      formChecker = new FormChecker (fieldName,value,[\r\n          {\r\n            method : InputValidator.isNotEmpty,\r\n            args : [],\r\n            message : '공란일 수 없습니다'\r\n          },\r\n          {\r\n            method : InputValidator.letterCondition,\r\n            args : ['hangul','alphabet','number'],\r\n            message : '한글, 알파벳, 숫자만 입력 가능합니다.'\r\n          },\r\n          {\r\n            method : InputValidator.strLengthCondition,\r\n            args : [{min : 2, max : 10}],\r\n            message : 2 + ' 글자 이상 ' + 10 + ' 글자 이하여야 합니다' \r\n          }\r\n      ]);\r\n      break;\r\n\r\n    case 'email' :\r\n      formChecker = new FormChecker (fieldName,value,[\r\n        {\r\n          method : InputValidator.isNotEmpty,\r\n          args : [],\r\n          message : '공란일 수 없습니다'\r\n        },\r\n        {\r\n          method : InputValidator.validate.isEmail,\r\n          args : [],\r\n          message : '올바른 이메일 형식이 아닙니다'\r\n        }\r\n      ]);\r\n      break\r\n\r\n  case 'password' :\r\n    formChecker = new FormChecker (fieldName,value,[\r\n      {\r\n        method : InputValidator.isNotEmpty,\r\n        args : [],\r\n        message : '공란일 수 없습니다'\r\n      },\r\n      {\r\n        method : InputValidator.passwordStrengthCondition,\r\n        args : [],\r\n        message : '특수문자 포함 최소 8자 ~ 최대 20자 이내로 입력합니다.'\r\n      }\r\n    ]);\r\n    break;\r\n\r\n  case 'passwordConfirmation' :\r\n\r\n    formChecker = new FormChecker (fieldName,value,[\r\n      {\r\n        method : InputValidator.isNotEmpty,\r\n        args : [],\r\n        message : '공란일 수 없습니다'\r\n      },\r\n      {\r\n        method : InputValidator.sameAsPassword,\r\n        args : [{confirmationStr : this.state.formFieldInput.password}],\r\n        message : '비밀번호가 일치하지 않습니다'\r\n      }\r\n    ]);\r\n    break;\r\n\r\n  default :\r\n    break;\r\n\r\n  }\r\n      \r\n  validationResult = formChecker.validate();  \r\n  this.setValidationResult(validationResult);\r\n}\r\n\r\nonChange(e){\r\n  const name = e.target.name;\r\n  const value = e.target.value;\r\n\r\n  this.setState(prevState =>({\r\n      formFieldInput:{\r\n          ...prevState.formFieldInput,\r\n          [name] : value\r\n      }\r\n  }), () => this.validateChangedField (name,value) );\r\n}\r\n\r\nonSubmit(e){\r\n  //you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. \r\n  e.preventDefault();\r\n\r\n  const {emailValid,userNameValid,passwordValid,passwordConfirmationValid} = this.state.formFieldValid;\r\n\r\n  if (emailValid === null && \r\n      userNameValid === null && \r\n      passwordValid === null &&\r\n      passwordConfirmationValid === null) {\r\n    \r\n        this.registrationApiCall();\r\n  }\r\n  else\r\n    console.log('Submit conditions are not satisfied..');\r\n}\r\n\r\nrender (){\r\n  return (\r\n    <div>\r\n        <Form onSubmit = {this.onSubmit}>\r\n        <h1 className = \"FormHeader\">회원가입</h1>\r\n          <FormGroup\r\n            validationState = {this.state.formFieldValid.userNameValid} \r\n          >\r\n          <ControlLabel>이름</ControlLabel>\r\n            <FormControl\r\n              value = {this.state.formFieldInput.userName}\r\n              onChange={this.onChange}\r\n              type = \"text\"\r\n              name=\"userName\">\r\n            </FormControl>\r\n            <FormControl.Feedback/>\r\n              <HelpBlock>{this.state.formFieldMessage.userNameValError}</HelpBlock>\r\n            </FormGroup>\r\n\r\n            <FormGroup\r\n              validationState = {this.state.formFieldValid.emailValid}\r\n            >\r\n            <ControlLabel>이메일 주소</ControlLabel>\r\n              <FormControl\r\n                value = {this.state.formFieldInput.email}\r\n                onChange={this.onChange}\r\n                type = \"text\"\r\n                name=\"email\">\r\n              </FormControl>\r\n              <FormControl.Feedback/>\r\n                <HelpBlock>{this.state.formFieldMessage.emailValError}</HelpBlock>\r\n              </FormGroup>\r\n            <FormGroup\r\n              validationState = {this.state.formFieldValid.passwordValid}\r\n            >\r\n            <ControlLabel>비밀번호</ControlLabel>\r\n            <FormControl\r\n              value = {this.state.formFieldInput.password}\r\n              onChange={this.onChange}\r\n              type = \"password\"\r\n              name=\"password\">\r\n            </FormControl>\r\n            <FormControl.Feedback/>\r\n              <HelpBlock>{this.state.formFieldMessage.passwordValError}</HelpBlock>\r\n            </FormGroup>\r\n            <FormGroup\r\n              style = {{marginBottom: '50px'}}\r\n              validationState = {this.state.formFieldValid.passwordConfirmationValid}\r\n            >\r\n            <ControlLabel>비밀번호 확인</ControlLabel>\r\n              <FormControl\r\n                value = {this.state.formFieldInput.passwordConfirmation}\r\n                onChange={this.onChange}\r\n                type = \"password\"\r\n                name=\"passwordConfirmation\">\r\n              </FormControl>\r\n              <FormControl.Feedback/>\r\n              <HelpBlock>{this.state.formFieldMessage.passwordConfirmationValError}</HelpBlock>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Button bsStyle = 'primary' block type = \"submit\">\r\n                확인\r\n              </Button>\r\n            </FormGroup>\r\n        </Form>\r\n        <div>\r\n            <a className = \"removeLinkDec\" href = \"http://localhost:8080/api/users/google_auth\"><Button style = {{marginBottom: '15px'}} bsStyle =\"danger\" block>구글 계정으로 시작하기</Button></a>\r\n            <a className = \"removeLinkDec\" href = \"http://localhost:8080/api/users/naver_auth\"><Button style = {{marginBottom: '15px'}} bsStyle =\"success\" block>네이버 계정으로 시작하기</Button></a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSignUpForm.propTypes = {\r\n  history: PropTypes.object.isRequired\r\n}\r\n\r\nexport default withRouter(SignUpForm)"]},"metadata":{},"sourceType":"module"}