{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\82102\\\\Study_Hub\\\\Study_Project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n// form에 입력된 값의 유효성 검사를 수행하는 helper class\nvar FormChecker =\n/*#__PURE__*/\nfunction () {\n  // 객체 생성시 필드명, 필드값, 유효성 조건을 저장한다. \n  function FormChecker(fieldName, value, validationInfo) {\n    _classCallCheck(this, FormChecker);\n\n    this.fieldName = fieldName;\n    this.value = value;\n    this.validationInfo = validationInfo;\n  } // 특정 필드가 주어진 복수의 유효성 조건을 만족하는지 판단한다.\n  // 판단 후 validResult 객체로 검사 결과를 반환한다.\n\n\n  _createClass(FormChecker, [{\n    key: \"validate\",\n    value: function validate() {\n      var validResult = {\n        fieldName: this.fieldName,\n        isCorrect: null,\n        message: ''\n      };\n      if (this.validationInfo.length == 0) return validResult;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.validationInfo[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var rule = _step.value;\n\n          if (!rule['method'](this.value, rule['args'])) {\n            validResult = {\n              fieldName: this.fieldName,\n              isCorrect: 'error',\n              message: rule['message']\n            };\n            return validResult;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return validResult;\n    }\n  }]);\n\n  return FormChecker;\n}();\n\nexport default FormChecker;","map":{"version":3,"sources":["C:\\Users\\82102\\Study_Hub\\Study_Project\\frontend\\src\\helpers\\FormChecker.js"],"names":["FormChecker","fieldName","value","validationInfo","validResult","isCorrect","message","length","rule"],"mappings":";;;AAAA;IACMA,W;;;AACJ;AACA,uBAAaC,SAAb,EAAuBC,KAAvB,EAA6BC,cAA7B,EAA4C;AAAA;;AACxC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACH,G,CAED;AACA;;;;;+BACY;AAER,UAAIC,WAAW,GAAG;AACdH,QAAAA,SAAS,EAAG,KAAKA,SADH;AAEdI,QAAAA,SAAS,EAAG,IAFE;AAGdC,QAAAA,OAAO,EAAG;AAHI,OAAlB;AAMA,UAAI,KAAKH,cAAL,CAAoBI,MAApB,IAA8B,CAAlC,EACI,OAAOH,WAAP;AATI;AAAA;AAAA;;AAAA;AAWR,6BAAiB,KAAKD,cAAtB,8HAAqC;AAAA,cAA5BK,IAA4B;;AAEjC,cAAI,CAACA,IAAI,CAAC,QAAD,CAAJ,CAAe,KAAKN,KAApB,EAA0BM,IAAI,CAAC,MAAD,CAA9B,CAAL,EAA6C;AAEzCJ,YAAAA,WAAW,GAAG;AACVH,cAAAA,SAAS,EAAG,KAAKA,SADP;AAEVI,cAAAA,SAAS,EAAG,OAFF;AAGVC,cAAAA,OAAO,EAAGE,IAAI,CAAC,SAAD;AAHJ,aAAd;AAMA,mBAAOJ,WAAP;AACH;AACJ;AAvBO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyBR,aAAOA,WAAP;AACH;;;;;;AACD,eAAeJ,WAAf","sourcesContent":["// form에 입력된 값의 유효성 검사를 수행하는 helper class\r\nclass FormChecker {\r\n  // 객체 생성시 필드명, 필드값, 유효성 조건을 저장한다. \r\n  constructor (fieldName,value,validationInfo){\r\n      this.fieldName = fieldName;\r\n      this.value = value;\r\n      this.validationInfo = validationInfo;\r\n  }\r\n\r\n  // 특정 필드가 주어진 복수의 유효성 조건을 만족하는지 판단한다.\r\n  // 판단 후 validResult 객체로 검사 결과를 반환한다.\r\n  validate () {\r\n\r\n      let validResult = {\r\n          fieldName : this.fieldName,\r\n          isCorrect : null,\r\n          message : ''\r\n      }\r\n\r\n      if (this.validationInfo.length == 0)\r\n          return validResult;\r\n\r\n      for (var rule of this.validationInfo){\r\n\r\n          if (!rule['method'](this.value,rule['args'])){\r\n              \r\n              validResult = {\r\n                  fieldName : this.fieldName,\r\n                  isCorrect : 'error',\r\n                  message : rule['message']\r\n              };\r\n\r\n              return validResult;\r\n          }\r\n      }\r\n      \r\n      return validResult;\r\n  }\r\n} export default FormChecker;"]},"metadata":{},"sourceType":"module"}